generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  hash         String
  wallet       Float
  fundKeywords String[]
}

model ExpensesCategory {
  id       Int       @id @default(autoincrement())
  userId   Int
  name     String
  color    String
  keywords String[]
  expenses Expense[]
}

enum ExpenseType {
  Manual
  Auto
}

model Expense {
  id          Int               @id @default(autoincrement())
  userId      Int
  date        DateTime
  categoryId  Int?
  category    ExpensesCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  description String
  vendor      String
  amount      Float
  tags        String[]
  type        ExpenseType
}

model Fund {
  id     Int         @id @default(autoincrement())
  userId Int
  date   DateTime
  source String
  amount Float
  type   ExpenseType
}

enum DiaryEntryType {
  Daily
  Monthly
}

model DiaryEntry {
  id          Int            @id @default(autoincrement())
  userId      Int
  date        DateTime
  content     String
  workContent String
  type        DiaryEntryType
}

model JournalCategory {
  id       Int              @id @default(autoincrement())
  userId   Int
  name     String
  sections JournalSection[]
}

model JournalSection {
  id         Int             @id @default(autoincrement())
  userId     Int
  categoryId Int
  category   JournalCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  name       String
  entries    JournalEntry[]
}

model JournalEntry {
  id         Int             @id @default(autoincrement())
  userId     Int
  sectionId  Int?
  section    JournalSection? @relation(fields: [sectionId], references: [id], onDelete: SetNull)
  date       DateTime
  content    String
  subEntries String[]
}

model NoteCategory {
  id     Int    @id @default(autoincrement())
  userId Int
  name   String
  notes  Note[]
}

model Note {
  id           Int           @id @default(autoincrement())
  userId       Int
  dateCreated  DateTime
  dateModified DateTime
  categoryId   Int?
  category     NoteCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  title        String
  content      String
  tags         String[]
}

enum PianoPieceStatus {
  Planned
  Learning
  Learned
  Learned_Forgotten
}

model PianoPiece {
  id            Int              @id @default(autoincrement())
  userId        Int
  name          String
  origin        String
  composer      String
  status        PianoPieceStatus
  sheetMusicUrl String
  youtubeUrl    String
  monthLearned  DateTime?
}

model Hike {
  id                 Int      @id @default(autoincrement())
  userId             Int
  date               DateTime
  description        String
  distance           Float
  ascent             Float
  descent            Float
  duration           Float
  durationWithBreaks Float
  coverImage         String
  images             String[]
  googleMapsUrl      String
}

enum VideoGameType {
  Online
  Single_Player
  Both
}

model VideoGame {
  id              Int           @id @default(autoincrement())
  userId          Int
  name            String
  platform        String
  type            VideoGameType
  completionCount Int
  firstPlayed     DateTime
  price           String
  extraPurchases  String
  storeUrl        String
  coverImage      String
}
